outlierprob <- matrix(0, nrow = numProtein, ncol = numIter)
allocOutprob <- array(0, c(nrow(unknownData), numIter, 2))
allocprob <- array(0, c(nrow(unknownData), numIter, K))
logMarginalNum <- vector(mode = "numeric", length = K)
logMarginalDen <- vector(mode = "numeric", length = K)
#random allocation of unknown Proteins
alloc[, 1] <- sample.int(n = K, size = numProtein, replace = TRUE)
#number of proteins allocated to each component
nk <- table(getMarkers(hlnorm, verbose = FALSE))[getMarkerClasses(hlnorm)]
#number of proteins allocated to each component with unknowns
nk <- nk
#precalculate component marginal likelihood here
for(j in seq.int(K)){
componentsdata <- c(as.vector(t(exprsKnown[allocKnown==j, ])))
logMarginalNum[j] <- -likelihoodGPcpp(componentsdata, seq.int(D), componenthypers[[j]], nk[j], D)
}
logMarginalDen <- logMarginalNum
#number initial allocated to outlier component
allocOut[, 1] <- 0
tau1 <- sum(allocOut[, 1] == 1) + nrow(exprsKnown)
tau2 <- sum(allocOut[, 1] == 0)
for(t in 2:numIter){
alloctemp <- alloc[, t - 1]
outlier <- allocOut[, t - 1]
for(i in seq.int(numProtein)){
priorPredictive <- (nk + alpha/K)/(sum(nk) + alpha - 1)
#if outlier not remove from cluster
if(outlier[i] != 0){
priorPredictive[alloctemp[i]] <- (nk[alloctemp[i]] - 1 + alpha/K)/(sum(nk[alloctemp[i]]) + alpha - 1)
}
Y <- exprsUnknown[-i, ] #remove ith protein from dataset
if(outlier[i] == 0 ){
for(j in seq.int(K)){
componentswithProtein <- c(as.vector(t(exprsKnown[allocKnown == j, ] )),
as.vector(t(Y[(alloctemp[-i] == j)&(outlier[-i] != 0),])), exprsUnknown[i, ])
componentswithoutProtein <- c(as.vector(t(exprsKnown[allocKnown == j, ] )),
as.vector(t(Y[(alloctemp[-i] == j)&(outlier[-i] != 0),])))
logMarginalNum[j] <- -likelihoodGPcpp(componentswithProtein, seq.int(D), componenthypers[[j]], nk[j] + 1, D)
logMarginalDen[j] <- -likelihoodGPcpp(componentswithoutProtein, seq.int(D), componenthypers[[j]], nk[j], D)
}
}else if (outlier[i]!=0){
for(j in seq.int(K)){
componentswithProtein <- c(as.vector(t(exprsKnown[allocKnown == j, ] )),
as.vector(t(Y[(alloctemp[-i] == j)&(outlier[-i] != 0),])), exprsUnknown[i, ])
componentswithoutProtein <- c(as.vector(t(exprsKnown[allocKnown == j, ] )),
as.vector(t(Y[(alloctemp[-i] == j)&(outlier[-i] != 0),])))
if(alloctemp[i] == j){
logMarginalNum[j] <- -likelihoodGPcpp(componentswithProtein, seq.int(D), componenthypers[[j]], nk[j], D)
logMarginalDen[j] <- -likelihoodGPcpp(componentswithoutProtein, seq.int(D), componenthypers[[j]], nk[j] - 1, D)
}else{
logMarginalNum[j] <- -likelihoodGPcpp(componentswithProtein, seq.int(D), componenthypers[[j]], nk[j] + 1, D)
logMarginalDen[j] <- -likelihoodGPcpp(componentswithoutProtein, seq.int(D), componenthypers[[j]], nk[j], D)
}
}
}
logratioML <- logMarginalNum  - logMarginalDen
unnormliasedlogallocprob <- log(priorPredictive)  + logratioML
unnormliasedlogallocprob <- unnormliasedlogallocprob - max(unnormliasedlogallocprob) #add consant for numerical stability
allocprob[i, t, ] <- exp(unnormliasedlogallocprob)/sum(exp(unnormliasedlogallocprob))
alloctemp[i] <- sample.int(n = K, size = 1, prob = allocprob[i, t, ])
#compute allocation to outlier component, allocation to component already computed
n <- numProtein
tau <- c(tau1, tau2) #temp variable for allocation
if(allocOut[i, t - 1] == 0){
tau[2] <- tau[2] - 1
}else{
tau[1] <- tau[1] - 1
}
priorOutlier <- (tau + c(v,u))/(sum(nk) +  u + v - 1)
allocOutprob[i, t, 1] <- log(priorOutlier[1]) + logratioML[alloctemp[i]]
allocOutprob[i, t, 2] <- log(priorOutlier[2]) + dmvtCpp(exprsUnknown[i,, drop =FALSE], mu = M, sigma = V, df = 4, log = T,
ncores_ = 1, isChol_ = F)
#still need to check dmtCpp and normalise if needed
allocOutprob[i, t, ] <- allocOutprob[i,t,] - max(allocOutprob[i,t, ])
#normalise and sample
allocOutprob[i, t, ] <- exp(allocOutprob[i, t, ])/sum(exp(allocOutprob[i, t, ]))
outlier[i] <- sample(x = c(1, 0), 1, prob = allocOutprob[i, t, ]) # reversed sample so 2nd entry is prob of 0
#reallocate
if(outlier[i] - allocOut[i, t - 1] == 1 ){
tau1 <- tau1 + 1
tau2 <- tau2 - 1
} else if (outlier[i] - allocOut[i, t - 1] == -1){
tau1 <- tau1 - 1
tau2 <- tau2 + 1
}
#reallocated component allocations
if((outlier[i]==0)&(allocOut[i, t - 1] == 0)){
#no reallocations needed
}else if((outlier[i]==0)&(allocOut[i, t - 1]==1)){
nk[alloctemp[i]] <- nk[alloctemp[i]] - 1
}else if((outlier[i] == 1)&(allocOut[i, t - 1]==1)){
if(alloctemp[i] - alloc[i, t-1] != 0 ){
nk[alloctemp[i]] <- nk[alloctemp[i]] + 1
nk[alloc[i, t - 1]] <- nk[alloc[i, t - 1]] - 1
}# if reallocated to same component do nothing
}else if ((outlier[i] == 1)&(allocOut[i, t - 1]==0)){
nk[alloctemp[i]] <- nk[alloctemp[i]] + 1
}
#update hypers
#if(hypLearn != "LBFGS"){
#do something here
#}
}
alloc[,t] <- alloctemp
allocOut[,t] <- outlier
}
nk
j
allocOut
i
t
i
alloctemp
alloctemp[i]
j
nk
outlier
sum(outlier)
sum(nk)
table(getMarkers(hlnorm, verbose = FALSE))[getMarkerClasses(hlnorm)]
sum(table(getMarkers(hlnorm, verbose = FALSE))[getMarkerClasses(hlnorm)])
192 + 94
j
i
j
componentswithProtein
length(componentswithProtein)
length(componentswithProtein)/4
nk[j]
outlier[i]
source('C:/Users/OllyC/Desktop/bayesian-spatial-proteomics/code/BayesGMM/GPcode/sprvsdmixGP.R')
if(outlier[i] == 0 ){
print("here")
for(j in seq.int(K)){
componentswithProtein <- c(as.vector(t(exprsKnown[allocKnown == j, ] )),
as.vector(t(Y[(alloctemp[-i] == j)&(outlier[-i] != 0),])), exprsUnknown[i, ])
componentswithoutProtein <- c(as.vector(t(exprsKnown[allocKnown == j, ] )),
as.vector(t(Y[(alloctemp[-i] == j)&(outlier[-i] != 0),])))
logMarginalNum[j] <- -likelihoodGPcpp(componentswithProtein, seq.int(D), componenthypers[[j]], nk[j] + 1, D)
logMarginalDen[j] <- -likelihoodGPcpp(componentswithoutProtein, seq.int(D), componenthypers[[j]], nk[j], D)
}
}else if (outlier[i]!=0){
print("there")
for(j in seq.int(K)){
componentswithProtein <- c(as.vector(t(exprsKnown[allocKnown == j, ] )),
as.vector(t(Y[(alloctemp[-i] == j)&(outlier[-i] != 0),])), exprsUnknown[i, ])
componentswithoutProtein <- c(as.vector(t(exprsKnown[allocKnown == j, ] )),
as.vector(t(Y[(alloctemp[-i] == j)&(outlier[-i] != 0),])))
if(alloctemp[i] == j){
logMarginalNum[j] <- -likelihoodGPcpp(componentswithProtein, seq.int(D), componenthypers[[j]], nk[j], D)
logMarginalDen[j] <- -likelihoodGPcpp(componentswithoutProtein, seq.int(D), componenthypers[[j]], nk[j] - 1, D)
}else{
logMarginalNum[j] <- -likelihoodGPcpp(componentswithProtein, seq.int(D), componenthypers[[j]], nk[j] + 1, D)
logMarginalDen[j] <- -likelihoodGPcpp(componentswithoutProtein, seq.int(D), componenthypers[[j]], nk[j], D)
}
}
}
length(componentswithProtein)
length(componentswithoutProtein)
nk
176/4
alloctemp[i]
j
alloctemp[i]==j
j
j = 1
componentswithProtein <- c(as.vector(t(exprsKnown[allocKnown == j, ] )),
as.vector(t(Y[(alloctemp[-i] == j)&(outlier[-i] != 0),])), exprsUnknown[i, ])
componentswithoutProtein <- c(as.vector(t(exprsKnown[allocKnown == j, ] )),
as.vector(t(Y[(alloctemp[-i] == j)&(outlier[-i] != 0),])))
if(alloctemp[i] == j){
logMarginalNum[j] <- -likelihoodGPcpp(componentswithProtein, seq.int(D), componenthypers[[j]], nk[j], D)
logMarginalDen[j] <- -likelihoodGPcpp(componentswithoutProtein, seq.int(D), componenthypers[[j]], nk[j] - 1, D)
}else{
logMarginalNum[j] <- -likelihoodGPcpp(componentswithProtein, seq.int(D), componenthypers[[j]], nk[j] + 1, D)
logMarginalDen[j] <- -likelihoodGPcpp(componentswithoutProtein, seq.int(D), componenthypers[[j]], nk[j], D)
}
j = 2
alloctemp[i]
componentswithProtein <- c(as.vector(t(exprsKnown[allocKnown == j, ] )),
as.vector(t(Y[(alloctemp[-i] == j)&(outlier[-i] != 0),])), exprsUnknown[i, ])
componentswithoutProtein <- c(as.vector(t(exprsKnown[allocKnown == j, ] )),
as.vector(t(Y[(alloctemp[-i] == j)&(outlier[-i] != 0),])))
if(alloctemp[i] == j){
logMarginalNum[j] <- -likelihoodGPcpp(componentswithProtein, seq.int(D), componenthypers[[j]], nk[j], D)
logMarginalDen[j] <- -likelihoodGPcpp(componentswithoutProtein, seq.int(D), componenthypers[[j]], nk[j] - 1, D)
}else{
logMarginalNum[j] <- -likelihoodGPcpp(componentswithProtein, seq.int(D), componenthypers[[j]], nk[j] + 1, D)
logMarginalDen[j] <- -likelihoodGPcpp(componentswithoutProtein, seq.int(D), componenthypers[[j]], nk[j], D)
}
j = 3
componentswithProtein <- c(as.vector(t(exprsKnown[allocKnown == j, ] )),
as.vector(t(Y[(alloctemp[-i] == j)&(outlier[-i] != 0),])), exprsUnknown[i, ])
componentswithoutProtein <- c(as.vector(t(exprsKnown[allocKnown == j, ] )),
as.vector(t(Y[(alloctemp[-i] == j)&(outlier[-i] != 0),])))
if(alloctemp[i] == j){
logMarginalNum[j] <- -likelihoodGPcpp(componentswithProtein, seq.int(D), componenthypers[[j]], nk[j], D)
logMarginalDen[j] <- -likelihoodGPcpp(componentswithoutProtein, seq.int(D), componenthypers[[j]], nk[j] - 1, D)
}else{
logMarginalNum[j] <- -likelihoodGPcpp(componentswithProtein, seq.int(D), componenthypers[[j]], nk[j] + 1, D)
logMarginalDen[j] <- -likelihoodGPcpp(componentswithoutProtein, seq.int(D), componenthypers[[j]], nk[j], D)
}
alloctemp[i-1]
alloctemp[i-2]
alloctemp[i-3]
j = 4
componentswithProtein <- c(as.vector(t(exprsKnown[allocKnown == j, ] )),
as.vector(t(Y[(alloctemp[-i] == j)&(outlier[-i] != 0),])), exprsUnknown[i, ])
componentswithoutProtein <- c(as.vector(t(exprsKnown[allocKnown == j, ] )),
as.vector(t(Y[(alloctemp[-i] == j)&(outlier[-i] != 0),])))
if(alloctemp[i] == j){
logMarginalNum[j] <- -likelihoodGPcpp(componentswithProtein, seq.int(D), componenthypers[[j]], nk[j], D)
logMarginalDen[j] <- -likelihoodGPcpp(componentswithoutProtein, seq.int(D), componenthypers[[j]], nk[j] - 1, D)
}else{
logMarginalNum[j] <- -likelihoodGPcpp(componentswithProtein, seq.int(D), componenthypers[[j]], nk[j] + 1, D)
logMarginalDen[j] <- -likelihoodGPcpp(componentswithoutProtein, seq.int(D), componenthypers[[j]], nk[j], D)
}
j = 5
componentswithProtein <- c(as.vector(t(exprsKnown[allocKnown == j, ] )),
as.vector(t(Y[(alloctemp[-i] == j)&(outlier[-i] != 0),])), exprsUnknown[i, ])
componentswithoutProtein <- c(as.vector(t(exprsKnown[allocKnown == j, ] )),
as.vector(t(Y[(alloctemp[-i] == j)&(outlier[-i] != 0),])))
if(alloctemp[i] == j){
logMarginalNum[j] <- -likelihoodGPcpp(componentswithProtein, seq.int(D), componenthypers[[j]], nk[j], D)
logMarginalDen[j] <- -likelihoodGPcpp(componentswithoutProtein, seq.int(D), componenthypers[[j]], nk[j] - 1, D)
}else{
logMarginalNum[j] <- -likelihoodGPcpp(componentswithProtein, seq.int(D), componenthypers[[j]], nk[j] + 1, D)
logMarginalDen[j] <- -likelihoodGPcpp(componentswithoutProtein, seq.int(D), componenthypers[[j]], nk[j], D)
}
nk
alloctemp[outlier!=0]
tabulate(alloctemp[outlier!=0])
table(getMarkers(hlnorm, verbose = FALSE))[getMarkerClasses(hlnorm)]
tabulate(alloctemp[outlier!=0]) - table(getMarkers(hlnorm, verbose = FALSE))[getMarkerClasses(hlnorm)]
nk
nk - table(getMarkers(hlnorm, verbose = FALSE))[getMarkerClasses(hlnorm)]
alloc[i]
alloctemp[i]
alloctemp[i-1]
source('C:/Users/OllyC/Desktop/bayesian-spatial-proteomics/code/BayesGMM/GPcode/sprvsdmixGP.R')
testrun <- sprvsdmixGP(tan2009r1)
source('C:/Users/OllyC/Desktop/bayesian-spatial-proteomics/code/BayesGMM/GPcode/sprvsdmixGP.R')
testrun <- sprvsdmixGP(tan2009r1)
source('C:/Users/OllyC/Desktop/bayesian-spatial-proteomics/code/BayesGMM/GPcode/sprvsdmixGP.R')
testrun <- sprvsdmixGP(tan2009r1)
system.time(testrun <- sprvsdmixGP(tan2009r1))
source('C:/Users/OllyC/Desktop/bayesian-spatial-proteomics/code/BayesGMM/GPcode/sprvsdmixGP.R')
system.time(testrun <- sprvsdmixGP(tan2009r1))
source('C:/Users/OllyC/Desktop/bayesian-spatial-proteomics/code/BayesGMM/GPcode/sprvsdmixGP.R')
source('C:/Users/OllyC/Desktop/bayesian-spatial-proteomics/code/BayesGMM/GPcode/sprvsdmixGP.R')
system.time(testrun5 <- sprvsdmixGP(tan2009r1))
prob <- t(apply(testrun[[3]][,1:1000,],1,colMeans))
membershipProb <- prob
rownames(prob) <- rownames(unknownMSnSet(tan2009r1))
object <- tan2009r1
X <- exprs(unknownMSnSet(tan2009r1))
organellealloc <- matrix(0, nrow = nrow(X), ncol = 2)
organellealloc[, 1] <- getMarkerClasses(object)[apply(membershipProb, 1, which.max)]
proballoc <- apply(membershipProb, 1, which.max)
for(i in 1:nrow(X)){
organellealloc[i, 2] <- as.numeric(membershipProb[i, proballoc[i]])
}
rownames(membershipProb) <- rownames(unknownMSnSet(object))
rownames(organellealloc) <- rownames(unknownMSnSet(object))
pred <- c(organellealloc[, 1], as.character(fData(markerMSnSet(object))[,"markers"]))
prob <- c(organellealloc[, 2], rep(1,length(fData(markerMSnSet(object))$markers)))
names(prob) <- c(rownames(unknownMSnSet(object)), rownames(fData(markerMSnSet(object))))
names(pred) <- c(rownames(unknownMSnSet(object)), rownames(fData(markerMSnSet(object))))
fData(object)$predicted.allocation <- pred[rownames(fData(object))]
fData(object)$predicted.probability <- prob[rownames(fData(object))]
ptsze <- exp(as.numeric(fData(object)$predicted.probability)) - 1
setStockcol(paste0(getStockcol(), 90))
plot2D(object, fcol="predicted.allocation", cex = ptsze, main="Prediction with pointer size scaled with probability of membership" )
addLegend(object, cex=0.6, where="bottomleft")
setStockcol(getLisacol())
prob <- t(apply(testrun[[3]][,100:1000,],1,colMeans))
membershipProb <- prob
rownames(prob) <- rownames(unknownMSnSet(tan2009r1))
object <- tan2009r1
X <- exprs(unknownMSnSet(tan2009r1))
organellealloc <- matrix(0, nrow = nrow(X), ncol = 2)
organellealloc[, 1] <- getMarkerClasses(object)[apply(membershipProb, 1, which.max)]
proballoc <- apply(membershipProb, 1, which.max)
for(i in 1:nrow(X)){
organellealloc[i, 2] <- as.numeric(membershipProb[i, proballoc[i]])
}
rownames(membershipProb) <- rownames(unknownMSnSet(object))
rownames(organellealloc) <- rownames(unknownMSnSet(object))
pred <- c(organellealloc[, 1], as.character(fData(markerMSnSet(object))[,"markers"]))
prob <- c(organellealloc[, 2], rep(1,length(fData(markerMSnSet(object))$markers)))
names(prob) <- c(rownames(unknownMSnSet(object)), rownames(fData(markerMSnSet(object))))
names(pred) <- c(rownames(unknownMSnSet(object)), rownames(fData(markerMSnSet(object))))
fData(object)$predicted.allocation <- pred[rownames(fData(object))]
fData(object)$predicted.probability <- prob[rownames(fData(object))]
ptsze <- exp(as.numeric(fData(object)$predicted.probability)) - 1
setStockcol(paste0(getStockcol(), 90))
plot2D(object, fcol="predicted.allocation", cex = ptsze, main="Prediction with pointer size scaled with probability of membership" )
addLegend(object, cex=0.6, where="bottomleft")
setStockcol(getLisacol())
membershipProb
membershipProb[1,]
membershipProb[2,]
membershipProb[3,]
testrun$alloc[1,]
testrun$alloc[2,]
testrun$alloc[,1]
testrun$alloc[,12]
testrun$alloc[,2]
testrun$alloc[,3]
testrun$alloc[,4]
testrun$alloc[,5]
testrun$alloc[,6]
testrun$alloc[,100]
tabulate(testrun$alloc[,100])
tabulate(testrun$alloc[,1000])
data("beltranMOCK24")
pRolocdata()
data("beltran2016MOCK24")
plot2D(beltran2016MOCK24)
data("beltran2016MOCK48")
plot2D(beltran2016MOCK48)
t(apply(testrun[[1]][,100:1000,],1,colMeans))
source('C:/Users/OllyC/Desktop/bayesian-spatial-proteomics/code/BayesGMM/GPcode/sprvsdmixGP.R')
plot2D(tan2009r1)
source('C:/Users/OllyC/Desktop/bayesian-spatial-proteomics/code/BayesGMM/GPcode/sprvsdmixGP.R')
data("dunkley2006")
testrunDunkley <- sprvsdmixGP(dunkley2006)
dunkley2006
source('C:/Users/OllyC/Desktop/bayesian-spatial-proteomics/code/BayesGMM/GPcode/sprvsdmixGP.R')
testrunDunkley <- sprvsdmixGP(dunkley2006)
source('C:/Users/OllyC/Desktop/bayesian-spatial-proteomics/code/BayesGMM/GPcode/sprvsdmixGP.R')
testrunDunkley <- sprvsdmixGP(dunkley2006)
prob <- t(apply(testrunDunkley[[3]][,,],1,colMeans))
proboutlier
membershipProb <- prob
object <- dunkley2006
rownames(prob) <- rownames(unknownMSnSet(object)
X <- exprs(unknownMSnSet(object)
organellealloc <- matrix(0, nrow = nrow(X), ncol = 2)
organellealloc[, 1] <- getMarkerClasses(object)[apply(membershipProb, 1, which.max)]
proballoc <- apply(membershipProb, 1, which.max)
for(i in 1:nrow(X)){
organellealloc[i, 2] <- as.numeric(membershipProb[i, proballoc[i]])
}
rownames(membershipProb) <- rownames(unknownMSnSet(object))
rownames(organellealloc) <- rownames(unknownMSnSet(object))
pred <- c(organellealloc[, 1], as.character(fData(markerMSnSet(object))[,"markers"]))
prob <- c(organellealloc[, 2], rep(1,length(fData(markerMSnSet(object))$markers)))
names(prob) <- c(rownames(unknownMSnSet(object)), rownames(fData(markerMSnSet(object))))
names(pred) <- c(rownames(unknownMSnSet(object)), rownames(fData(markerMSnSet(object))))
fData(object)$predicted.allocation <- pred[rownames(fData(object))]
fData(object)$predicted.probability <- prob[rownames(fData(object))]
ptsze <- exp(as.numeric(fData(object)$predicted.probability)) - 1
setStockcol(paste0(getStockcol(), 90))
plot2D(object, fcol="predicted.allocation", cex = ptsze, main="Prediction with pointer size scaled with probability of membership" )
addLegend(object, cex=0.6, where="bottomleft")
setStockcol(getLisacol())
testrunDunkley[[3]][1,,]
testrunDunkley[[3]][,1,]
testrunDunkley
testrunDunkley$allocprob[1,1,]
testrunDunkley$allocprob[1,2,]
testrunDunkley$allocprob[1,3,]
testrunDunkley$allocprob[1,4,]
testrunDunkley$allocprob[2,1,]
testrunDunkley$allocprob[2,2,]
testrunDunkley$allocprob[2,100,]
testrunDunkley$allocprob[2,101,]
testrunDunkley$allocprob[2,10,]
testrunDunkley$allocprob[30,2,]
testrunDunkley$allocprob[30,3,]
plot2D(dunkley2006)
plot2D(dunkley2006[,1:4])
plot2D(dunkley2006[,1:8])
plot2D(dunkley2006[,1:12])
plot2D(dunkley2006[,1:16])
plot2D(dunkley2006[,12:16])
plot2D(dunkley2006[,1:4])
plot2D(dunkley2006[,1:8])
plot2D(dunkley2006[,1:12])
plot2D(dunkley2006[,1:16])
testrunDunkley <- sprvsdmixGP(dunkley2006)
prob <- t(apply(testrunDunkley[[3]][,,],1,colMeans))
proboutlier
membershipProb <- prob
membershipProb
object <- dunkley2006
rownames(prob) <- rownames(unknownMSnSet(object)
X <- exprs(unknownMSnSet(object)
organellealloc <- matrix(0, nrow = nrow(X), ncol = 2)
organellealloc[, 1] <- getMarkerClasses(object)[apply(membershipProb, 1, which.max)]
proballoc <- apply(membershipProb, 1, which.max)
for(i in 1:nrow(X)){
organellealloc[i, 2] <- as.numeric(membershipProb[i, proballoc[i]])
}
rownames(membershipProb) <- rownames(unknownMSnSet(object))
rownames(organellealloc) <- rownames(unknownMSnSet(object))
pred <- c(organellealloc[, 1], as.character(fData(markerMSnSet(object))[,"markers"]))
prob <- c(organellealloc[, 2], rep(1,length(fData(markerMSnSet(object))$markers)))
names(prob) <- c(rownames(unknownMSnSet(object)), rownames(fData(markerMSnSet(object))))
names(pred) <- c(rownames(unknownMSnSet(object)), rownames(fData(markerMSnSet(object))))
fData(object)$predicted.allocation <- pred[rownames(fData(object))]
fData(object)$predicted.probability <- prob[rownames(fData(object))]
ptsze <- exp(as.numeric(fData(object)$predicted.probability)) - 1
setStockcol(paste0(getStockcol(), 90))
plot2D(object, fcol="predicted.allocation", cex = ptsze, main="Prediction with pointer size scaled with probability of membership" )
addLegend(object, cex=0.6, where="bottomleft")
setStockcol(getLisacol())
fData(dunkley2006)
pred
object
fData(object)$predicted.allocation
prob[rownames(fData(object))]
fData(object)$predicted.probability <- prob[rownames(fData(object))]
fData(object)$predicted.probability
prob <- t(apply(testrunDunkley[[3]][,,],1,colMeans))
proboutlier
membershipProb <- prob
object <- dunkley2006
rownames(prob) <- rownames(unknownMSnSet(object)
X <- exprs(unknownMSnSet(object)
organellealloc <- matrix(0, nrow = nrow(X), ncol = 2)
organellealloc[, 1] <- getMarkerClasses(object)[apply(membershipProb, 1, which.max)]
proballoc <- apply(membershipProb, 1, which.max)
for(i in 1:nrow(X)){
organellealloc[i, 2] <- as.numeric(membershipProb[i, proballoc[i]])
}
rownames(membershipProb) <- rownames(unknownMSnSet(object))
rownames(organellealloc) <- rownames(unknownMSnSet(object))
pred <- c(organellealloc[, 1], as.character(fData(markerMSnSet(object))[,"markers"]))
prob <- c(organellealloc[, 2], rep(1,length(fData(markerMSnSet(object))$markers)))
names(prob) <- c(rownames(unknownMSnSet(object)), rownames(fData(markerMSnSet(object))))
names(pred) <- c(rownames(unknownMSnSet(object)), rownames(fData(markerMSnSet(object))))
fData(object)$predicted.allocation <- pred[rownames(fData(object))]
fData(object)$predicted.probability <- prob[rownames(fData(object))]
ptsze <- exp(as.numeric(fData(object)$predicted.probability)) - 1
getMarkerClasses(object)
nrow(X)
nrow(membershipProb)
X <- exprs(unknownMSnSet(object)
organellealloc <- matrix(0, nrow = nrow(X), ncol = 2)
organellealloc[, 1] <- getMarkerClasses(object)[apply(membershipProb, 1, which.max)]
proballoc <- apply(membershipProb, 1, which.max)
for(i in 1:nrow(X)){
organellealloc[i, 2] <- as.numeric(membershipProb[i, proballoc[i]])
}
rownames(membershipProb) <- rownames(unknownMSnSet(object))
rownames(organellealloc) <- rownames(unknownMSnSet(object))
pred <- c(organellealloc[, 1], as.character(fData(markerMSnSet(object))[,"markers"]))
prob <- c(organellealloc[, 2], rep(1,length(fData(markerMSnSet(object))$markers)))
names(prob) <- c(rownames(unknownMSnSet(object)), rownames(fData(markerMSnSet(object))))
names(pred) <- c(rownames(unknownMSnSet(object)), rownames(fData(markerMSnSet(object))))
fData(object)$predicted.allocation <- pred[rownames(fData(object))]
fData(object)$predicted.probability <- prob[rownames(fData(object))]
ptsze <- exp(as.numeric(fData(object)$predicted.probability)) - 1
setStockcol(paste0(getStockcol(), 90))
plot2D(object, fcol="predicted.allocation", cex = ptsze, main="Prediction with pointer size scaled with probability of membership" )
addLegend(object, cex=0.6, where="bottomleft")
setStockcol(getLisacol())
X <- exprs(unknownMSnSet(object))
organellealloc <- matrix(0, nrow = nrow(X), ncol = 2)
organellealloc[, 1] <- getMarkerClasses(object)[apply(membershipProb, 1, which.max)]
proballoc <- apply(membershipProb, 1, which.max)
for(i in 1:nrow(X)){
organellealloc[i, 2] <- as.numeric(membershipProb[i, proballoc[i]])
}
rownames(membershipProb) <- rownames(unknownMSnSet(object))
rownames(organellealloc) <- rownames(unknownMSnSet(object))
pred <- c(organellealloc[, 1], as.character(fData(markerMSnSet(object))[,"markers"]))
prob <- c(organellealloc[, 2], rep(1,length(fData(markerMSnSet(object))$markers)))
names(prob) <- c(rownames(unknownMSnSet(object)), rownames(fData(markerMSnSet(object))))
names(pred) <- c(rownames(unknownMSnSet(object)), rownames(fData(markerMSnSet(object))))
fData(object)$predicted.allocation <- pred[rownames(fData(object))]
fData(object)$predicted.probability <- prob[rownames(fData(object))]
ptsze <- exp(as.numeric(fData(object)$predicted.probability)) - 1
setStockcol(paste0(getStockcol(), 90))
plot2D(object, fcol="predicted.allocation", cex = ptsze, main="Prediction with pointer size scaled with probability of membership" )
addLegend(object, cex=0.6, where="bottomleft")
prob
plotDist(hlo[fData(hlo)$markers == "Golgi", ],
pcol = getStockcol()[3], xlab= "", lwd = 10, type = "l")
matlines(t(exprs(hlo[fData(hlo)$markers == "Mitochondrion" , ])),lty = 1, col = getStockcol()[4], lwd = 1, type="l" )
hlo <- dunkley2006
plotDist(hlo[fData(hlo)$markers == "Golgi", ],
pcol = getStockcol()[3], xlab= "", lwd = 10, type = "l")
matlines(t(exprs(hlo[fData(hlo)$markers == "Mitochondrion" , ])),lty = 1, col = getStockcol()[4], lwd = 1, type="l" )
hlo <- dunkley2006[1:4]
plotDist(hlo[fData(hlo)$markers == "Golgi", ],
pcol = getStockcol()[3], xlab= "", lwd = 10, type = "l")
hlo <- dunkley2006[1:4,]
plotDist(hlo[fData(hlo)$markers == "Golgi", ],
pcol = getStockcol()[3], xlab= "", lwd = 10, type = "l")
hlo <- dunkley2006[,1:4]
plotDist(hlo[fData(hlo)$markers == "Golgi", ],
pcol = getStockcol()[3], xlab= "", lwd = 10, type = "l")
matlines(t(exprs(hlo[fData(hlo)$markers == "Mitochondrion" , ])),lty = 1, col = getStockcol()[4], lwd = 1, type="l" )
hlo <- dunkley2006[,1:4]
plotDist(hlo[fData(hlo)$markers == "Golgi", ],
pcol = getStockcol()[3], xlab= "", lwd = 10, type = "l")
matlines(t(exprs(hlo[fData(object)$predicted.allocation == "Golgi" , ])),lty = 1, col = getStockcol()[4], lwd = 1, type="l" )
hlo <- dunkley2006[,1:4]
plotDist(hlo[fData(hlo)$markers == "Golgi", ],
pcol = getStockcol()[3], xlab= "", lwd = 10, type = "l")
matlines(t(exprs(hlo[fData(object)$predicted.allocation == "Golgi" , ])),lty = 1, col = grey, lwd = 1, type="l" )
matlines(t(exprs(hlo[fData(object)$predicted.allocation == "Golgi" , ])),lty = 1, col = "grey", lwd = 1, type="l" )
plotDist(hlo[fData(hlo)$markers == "Golgi", ],
pcol = getStockcol()[3], xlab= "", lwd = 10, type = "l")
matlines(t(exprs(hlo[fData(object)$predicted.allocation == "Golgi" , ])),lty = 1, col = "grey", lwd = 1, type="l", alpha = 0.1)
matlines(t(exprs(hlo[fData(object)$predicted.allocation == "Golgi" , ])),lty = 1, col = "grey", lwd = 1, type="b", alpha = 0.1)
plotDist(hlo[fData(hlo)$markers == "Golgi", ],
pcol = getStockcol()[3], xlab= "", lwd = 10, type = "l")
matlines(t(exprs(hlo[fData(object)$predicted.allocation == "Golgi" , ])),lty = 1, col = "grey", lwd = 1, type="b", alpha = 0.1)
